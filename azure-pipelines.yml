trigger:
- master
variables:
- group: aws-access-credentials
- name: imageName
  value: 'companies-house-pipeline-container'
pool:
  vmImage: 'ubuntu-latest'
jobs:
- job: EchoVariables
  steps:
    - script: |
        echo original access key credentials $(aws-access-key-id-original-tenant)
- job: ConfigureAWSCredentials
  steps:
    - script: |
        sudo pip3 install setuptools
        sudo pip3 install --upgrade awscli
      displayName: Install dependencies
    - script: |
        mkdir .aws
        echo $(aws-access-key-id-original-tenant) echoing to make sure the yaml file can call it
        echo $(aws-secret-key-original-tenant) echoing to make sure the yaml file can call it
        echo "[default]\naws_access_key_id=$(aws-access-key-id-original-tenant)\naws_secret_access_key=$(aws-secret-key-original-tenant)" > ~/.aws/credentials
        aws configure set region $(aws-region)
        $(aws ecr get-login --no-include-email)
      displayName: Signing into AWS ECR
    - script: echo dir generation for aws complete
      displayName: Confirmation of AWS Credentials
- job: BuildAndPushDockerimage
  dependsOn: ConfigureAWSCredentials
  steps:
    - checkout: self
    - script: |
        export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
        export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
        export AWS_REGION=$(AWS_REGION)
      displayName: 'Adding environment variables for AWS'
    - task: Docker@2
      displayName: 'Building the french_financials image'
      inputs:
        repository: $(imageName)
        command: 'build'
        Dockerfile: './Dockerfile'
        arguments: --build-arg AWS_ACCESS_KEY_ID_ARG=$(AWS_ACCESS_KEY_ID) --build-arg AWS_SECRET_ACCESS_KEY_ARG=$(AWS_SECRET_ACCESS_KEY) --build-arg AWS_REGION_ARG=$(AWS_REGION)
        buildContext: .
        tags: |
          latest
          $(Build.BuildId)
    - script: docker image ls
      displayName: 'Listing Docker containers for debug'
    - task: ECRPushImage@1
      displayName: 'Pushing $(imageName):latest to ECR'
      inputs:
        sourceImageName: $(imageName)
        repositoryName: $(imageName)